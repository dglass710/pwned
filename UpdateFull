#!/bin/bash

# This script automates the process of fully updating a database and Docker image for Have I Been Pwned? password data.
# The steps include:
# 1. Checking if Docker is running and starting it if necessary.
# 2. Downloading the latest password data.
# 3. Removing the old pwned.db database file if it exists.
# 4. Running a custom Python script to build a new pwned.db database from the downloaded password file.
# 5. Removing the password file (pwnedpasswords.txt) after the database is built.
# 6. Pruning Docker images with the name defined in DOCKER_IMAGE variable to free up space.
# 7. Building a Docker image using the latest base image of bitnami/minideb, which includes the newly built pwned.db.
# 8. Pushing the updated Docker image to Docker Hub.
# Additionally, this script logs its progress to a log file with timestamps and the name of the script.

# Source the configuration and shared functions files
source "$(dirname "$0")/user_settings.sh"
source "$(dirname "$0")/shared_functions.sh"

set -e  # Exit immediately if a command exits with a non-zero status.

SCRIPT_NAME="UpdateFull"
PASSWORD_BASENAME="pwnedpasswords"
PASSWORD_FILE="${PASSWORD_BASENAME}.txt"
DB_FILE="pwned.db"
PYTHON_PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin/python3"
DOCKERFILE_PATH="Dockerfile"

# Log message
log_step_start "Execution"

# Change to the Project Directory
cd $PROJECT_DIR

# Ensure Docker is running
echo "Starting Docker if it's not already running..."
open /Applications/Docker.app

# Always download new passwords and rebuild the database
if [ -f "$DB_FILE" ]; then
    log_message $SCRIPT_NAME "Removing old database"
    echo "Removing old database..."
    rm "$DB_FILE"
fi

log_step_start "Downloading the latest passwords"
download_passwords
log_step_end "Downloading the latest passwords"

log_step_start "Building the database"
build_database
log_step_end "Building the database"
remove_passwords

# Prune Docker images with the specified name
prune_docker_images

log_step_start "Building Docker image"
# Build the Docker image according to the Dockerfile
echo "Building Docker image..."
docker build -t "$DOCKER_IMAGE" -f "$DOCKERFILE_PATH" .
log_step_end "Building Docker image"

log_step_start "Pushing Docker image to Docker Hub"
# Push the updated image to Docker Hub
echo "Pushing Docker image to Docker Hub..."
docker push "$DOCKER_IMAGE"
log_step_end "Pushing Docker image to Docker Hub"

log_step_end "Execution"
echo "Update script completed successfully."
