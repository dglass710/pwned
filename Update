#!/bin/bash

# This script automates the process of updating a database and Docker image for Have I Been Pwned? password data.
# The steps include:
# 1. Checking if Docker is running and starting it if necessary.
# 2. Prompting the user to decide whether to download the latest password data and rebuild the database based on the timestamp of the existing database file.
# 3. Downloading the latest passwords and saving them in pwnedpasswords.txt.
# 4. Removing the old pwned.db database file if it exists and the user chooses to rebuild the database.
# 5. Running a custom Python script to build a new pwned.db database from the downloaded password file.
# 6. Removing the password file (pwnedpasswords.txt) after the database is built.
# 7. Pruning Docker images with the name defined in DOCKER_IMAGE variable to free up space.
# 8. Building a Docker image using the latest base image of bitnami/minideb, which includes the newly built pwned.db.
# 9. Pushing the updated Docker image to Docker Hub.
# 10. Logging progress to a log file with timestamps and script names.

# Source the configuration and shared functions files
source "$(dirname "$0")/user_settings.sh"
source "$(dirname "$0")/shared_functions.sh"

set -e  # Exit immediately if a command exits with a non-zero status.

SCRIPT_NAME="Update"
PASSWORD_BASENAME="pwnedpasswords"
PASSWORD_FILE="${PASSWORD_BASENAME}.txt"
DB_FILE="pwned.db"
PYTHON_PATH="/Library/Frameworks/Python.framework/Versions/3.12/bin/python3"
DOCKERFILE_PATH="Dockerfile"

# Log message
log_message $SCRIPT_NAME "Starting execution"

# Change to the Project Directory
cd $PROJECT_DIR

# Ensure Docker is running
echo "Starting Docker if it's not already running..."
open /Applications/Docker.app

# Check if the database file already exists
if [ -f "$DB_FILE" ]; then
    last_updated=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$DB_FILE")
    read -p "The database was last updated on $last_updated. Would you like to download the newest passwords and rebuild the database? (y/n) " choice
    case "$choice" in
        y|Y )
            log_step_start "Downloading the latest passwords"
            download_passwords
            log_step_end "Downloading the latest passwords"

            log_message $SCRIPT_NAME "Removing old database"
            echo "Removing old database..."
            rm "$DB_FILE"

            log_step_start "Building the database"
            build_database
            log_step_end "Building the database"
            ;;
        n|N )
            log_message $SCRIPT_NAME "Skipping download and database rebuild"
            echo "Skipping download and database rebuild."

            log_message $SCRIPT_NAME "Pausing to ensure Docker is started"
            echo "Now pausing to ensure Docker is started."
            sleep 5  # Wait for Docker to start
            ;;
        * )
            log_message $SCRIPT_NAME "Invalid choice. Exiting"
            echo "Invalid choice. Exiting."
            exit 1
            ;;
    esac
else
    log_step_start "Downloading the latest passwords"
    log_message $SCRIPT_NAME "No existing database found. Creating a new one"
    echo "No existing database found. Creating a new one."
    download_passwords
    log_step_end "Downloading the latest passwords"

    log_step_start "Building the database"
    build_database
    log_step_end "Building the database"
fi

# Prune Docker images with the specified name
prune_docker_images

log_step_start "Building Docker image"
# Build the Docker image according to the Dockerfile
echo "Building Docker image..."
docker build -t "$DOCKER_IMAGE" -f "$DOCKERFILE_PATH" .
log_step_end "Building Docker image"

log_step_start "Pushing Docker image to Docker Hub"
# Push the updated image to Docker Hub
echo "Pushing Docker image to Docker Hub..."
docker push "$DOCKER_IMAGE"
log_step_end "Pushing Docker image to Docker Hub"

log_message $SCRIPT_NAME "Update script completed successfully"
echo "Update script completed successfully."
