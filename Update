#!/bin/bash

# This script automates the process of updating a database and Docker image for Have I Been Pwned? password data.
# The steps include:
# 1. Checking if Docker is running and starting it if necessary.
# 2. Prompting the user to decide whether to download the latest password data and rebuild the database based on the timestamp of the existing database file.
# 3. Downloading the latest passwords and saving them in pwnedpasswords.txt.
# 4. Removing the old pwned.db database file if it exists and the user chooses to rebuild the database.
# 5. Running a custom Python script to build a new pwned.db database from the downloaded password file.
# 6. Removing the password file (pwnedpasswords.txt) after the database is built.
# 7. Pruning Docker images with the name defined in DOCKER_IMAGE variable to free up space.
# 8. Building a Docker image using the latest base image of bitnami/minideb, which includes the newly built pwned.db.
# 9. Pushing the updated Docker image to Docker Hub.
# 10. Logging progress to a log file with timestamps and script names.

# Source the configuration and shared functions files
source "$(dirname "$0")/user_settings.sh"
source "$(dirname "$0")/shared_functions.sh"

set -e  # Exit immediately if a command exits with a non-zero status.

# Join all command-line arguments into a single string, replacing spaces with underscores
ARGS="$(echo "$*" | sed 's/ /_/g')"

# Define SCRIPT_NAME to include all arguments
SCRIPT_NAME="Update${ARGS:+_$ARGS}"

PASSWORD_BASENAME="pwnedpasswords"
PASSWORD_FILE="${PASSWORD_BASENAME}.txt"
DB_FILE="$PROJECT_DIR/pwned.db"
DOCKERFILE_PATH="Dockerfile"

# Log message
log_step_start "Execution"

# Change to the Project Directory
cd $PROJECT_DIR

# Ensure Docker is running
echo "Starting Docker if it's not already running..."
open /Applications/Docker.app

# Function to perform Docker tasks
docker_tasks() {
    prune_docker_images

    log_step_start "Building Docker image"
    echo "Building Docker image..."
    docker build -t "$DOCKER_IMAGE" -f "$DOCKERFILE_PATH" .
    log_step_end "Building Docker image"

    log_step_start "Pushing Docker image to Docker Hub"
    echo "Pushing Docker image to Docker Hub..."
    docker push "$DOCKER_IMAGE"
    log_step_end "Pushing Docker image to Docker Hub"

    echo "Update script completed successfully."
}

# Function to perform a full update
full_update() {
    if [ -f "$DB_FILE" ]; then
        log_message $SCRIPT_NAME "Removing old database."
        echo "Removing old database..."
        rm "$DB_FILE"
    fi

    log_step_start "Downloading the latest passwords"
    download_passwords
    log_step_end "Downloading the latest passwords"

    log_step_start "Building the database"
    build_database
    log_step_end "Building the database"
    log_message $SCRIPT_NAME "The new database has checksum: $(shasum "$PROJECT_DIR/pwned.db" | awk '{print $1}')"
    remove_passwords

    docker_tasks
}

# Function to perform a partial update
partial_update() {
    if [ ! -f "$DB_FILE" ]; then
        log_message $SCRIPT_NAME "No existing database found. Downloading passwords and building database."
        echo "No existing database found. Downloading passwords and building database."

        full_update
    else
        echo "Now pausing to ensure Docker is started."
        sleep 5  # Wait for Docker to start
        docker_tasks
    fi
}

# Function to handle the default behavior (with or without an invalid argument)
default_behavior() {
    if [ -f "$DB_FILE" ]; then
        log_message $SCRIPT_NAME "Prompting user to see if they would like to replace the existing database."
        last_updated=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$DB_FILE")
        read -p "The database was last updated on $last_updated. Would you like to download the newest passwords and rebuild the database? (y/n) " choice
        log_message $SCRIPT_NAME "User response: $choice"
        case "$choice" in
            y|Y )
                full_update
                ;;
            n|N )
                log_message $SCRIPT_NAME "Skipping download and database rebuild."
                echo "Skipping download and database rebuild."
                echo "Now pausing to ensure Docker is started."
                sleep 5  # Wait for Docker to start
                docker_tasks
                ;;
            * )
                log_message $SCRIPT_NAME "Invalid choice. Exiting!"
                echo "Invalid choice. Exiting."
                exit 1
                ;;
        esac
    else
        log_message $SCRIPT_NAME "No existing database found. Creating a new one."
        echo "No existing database found. Creating a new one."
        full_update
    fi
}

# Main script logic based on the argument
if [ $# -eq 0 ]; then
    # Default behavior (check for database and prompt the user if it exists)
    default_behavior
elif [[ "$1" =~ ^[fF] ]]; then
    # Full update
    full_update
elif [[ "$1" =~ ^[pP] ]]; then
    # Partial update
    partial_update
else
    # Treat any other argument as default behavior
    default_behavior
fi

# Log the end of the script execution
log_step_end "Execution"
